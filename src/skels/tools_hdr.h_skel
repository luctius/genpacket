
#ifndef @ifndefname@_CQC_H
#define @ifndefname@_CQC_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define static_assert(pred, msg) _Static_assert( (pred), msg);

struct cqc {
    int head;
    int tail;
    int size;
};

@if@modulo@then@//#define CQC_USE_MODULO /* Define this if you need arbitrary size queues instead of power of two sizes. */@endif@
#ifdef CQC_USE_MODULO

    /* Init Circular buffer. In the case of Module, given size is the size of the buffer. */
#define cqc_init(cqc, sz) do { (cqc).size = sz; (cqc).tail = 0; (cqc).head = 0; } while (0)
    /* Size given with init. */
#define cqc_qsz(cqc)        ( (cqc).size )
    /* Number of Items in the buffer. */
#define cqc_cnt(cqc)        ( ((cqc).head-(cqc).tail) % ((cqc).size) )
    /* Add new item, returns a free index and updates bookkeeping. */
#define cqc_put(cqc)        ( ((cqc).head++)          % ((cqc).size) )
    /* Retreive item, returns an used index and updates bookkeeping. */
#define cqc_get(cqc)        ( ((cqc).tail++)          % ((cqc).size) )
    /* Retreive item idx, does not touch bookkeeping. */
#define cqc_peek(cqc, idx)  ( ((cqc).tail+idx)        % ((cqc).size) )
    /* Space left in the buffer. */
#define cqc_space(cqc)      ( ((cqc).size)            - (cqc_cnt(cqc)) )

#define cqc_cnt_to_end(cqc)     ({int end = (cqc.size) - (cqc.tail); int n = ((cqc.head) + end) & ((cqc.size)-1); n < end ? n : end;})
#define cqc_space_to_end(cqc)   ({int end = (cqc.size) - 1 - (cqc.head); int n = (end + (cqc.tail)) & ((cqc.size)-1); n <= end ? n : end+1;})

#elif !defined(CQC_USE_MODULO)

    /* Init Circular buffer. In the case of AND, given size is the nearest power of 2 of the given size. cqc_qsz should be used to initialise the buffer. */
#define cqc_init(cqc, sz) do { static_assert(sz != 0, "cqc sz is zero"); static_assert( (sz & (sz-1) ) == 0, "cqc sz is not a power of 2."); (cqc).size = sz-1; (cqc).tail = 0; (cqc).head = 0; } while (0)
    /* Size calculated in init. */
#define cqc_qsz(cqc)        ( (cqc).size+1 )
    /* Number of Items in the buffer. */
#define cqc_cnt(cqc)        ( ((cqc).head-(cqc).tail) & ((cqc).size) )
    /* Retreive item, returns an used index and updates bookkeeping. */
#define cqc_put(cqc)        ( ((cqc).head++)          & ((cqc).size) )
    /* Retreive item, returns an used index and updates bookkeeping. */
#define cqc_get(cqc)        ( ((cqc).tail++)          & ((cqc).size) )
    /* Retreive item idx, does not touch bookkeeping. */
#define cqc_peek(cqc, idx)  ( ((cqc).tail+idx)        & ((cqc).size) )
    /* Space left in the buffer. */
#define cqc_space(cqc)      ( ((cqc).size)            - (cqc_cnt(cqc)) )

#define cqc_cnt_to_end(cqc)     ({int end = (cqc.size) - (cqc.tail); int n = ((cqc.head) + end) & ((cqc.size)-1); n < end ? n : end;})
#define cqc_space_to_end(cqc)   ({int end = (cqc.size) - 1 - (cqc.head); int n = (end + (cqc.tail)) & ((cqc.size)-1); n <= end ? n : end+1;})

#endif /* CQC_USE_MODULO */

typedef unsigned long long int @prefix@_crc_t;

typedef struct {
    bool table_generated;   /*!< Set to false, please */
    unsigned int width;     /*!< The width of the polynomial */
    @prefix@_crc_t poly;             /*!< The CRC polynomial */
    bool reflect_in;         /*!< Whether the input shall be reflected or not */
    @prefix@_crc_t xor_in;           /*!< The initial value of the algorithm */
    bool reflect_out;        /*!< Wether the output shall be reflected or not */
    @prefix@_crc_t xor_out;          /*!< The value which shall be XOR-ed to the final CRC value */

    /* internal parameters */
    @prefix@_crc_t msb_mask;             /*!< a bitmask with the Most Significant Bit set to 1
                                     initialise as (crc_t)1u << (width - 1) */
    @prefix@_crc_t crc_mask;             /*!< a bitmask with all width bits set to 1
                                     initialise as (cfg->msb_mask - 1) | cfg->msb_mask */
    unsigned int crc_shift;     /*!< a shift count that is used when width < 8
                                     initialise as cfg->width < 8 ? 8 - cfg->width : 0 */

    @prefix@_crc_t crc_table[256];
} @prefix@_crc_cfg_t;

uint64_t @prefix@_crc(@prefix@_crc_cfg_t *cfg,const void *data, size_t len);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* @ifndefname@_CQC_H */

